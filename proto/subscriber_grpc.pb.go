// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscriberClient is the client API for Subscriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Subscriber_SubscribeClient, error)
}

type subscriberClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberClient(cc grpc.ClientConnInterface) SubscriberClient {
	return &subscriberClient{cc}
}

func (c *subscriberClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Subscriber_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Subscriber_serviceDesc.Streams[0], "/lmq.Subscriber/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriberSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Subscriber_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type subscriberSubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriberSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriberServer is the server API for Subscriber service.
// All implementations must embed UnimplementedSubscriberServer
// for forward compatibility
type SubscriberServer interface {
	Subscribe(*SubscribeRequest, Subscriber_SubscribeServer) error
	mustEmbedUnimplementedSubscriberServer()
}

// UnimplementedSubscriberServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberServer struct {
}

func (*UnimplementedSubscriberServer) Subscribe(*SubscribeRequest, Subscriber_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedSubscriberServer) mustEmbedUnimplementedSubscriberServer() {}

func RegisterSubscriberServer(s *grpc.Server, srv SubscriberServer) {
	s.RegisterService(&_Subscriber_serviceDesc, srv)
}

func _Subscriber_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriberServer).Subscribe(m, &subscriberSubscribeServer{stream})
}

type Subscriber_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type subscriberSubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriberSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Subscriber_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lmq.Subscriber",
	HandlerType: (*SubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Subscriber_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/subscriber.proto",
}
